{
  "select": {
    "all" : {
      "nodes": [
        "SELECT",
        "  nodes.node_id as id,",
        "  nodes.visible,",
        "  nodes.version,",
        "  nodes.changeset_id as changeset,",
        "  nodes.timestamp AT TIME ZONE 'UTC' as timestamp,",
        "  users.display_name as user,",
        "  changesets.user_id as uid,",
        "  nodes.latitude/10000000::float as lat,",
        "  nodes.longitude/10000000::float as lon,",
        "  to_json(ARRAY(SELECT HSTORE(temp) FROM (SELECT k, v FROM node_tags WHERE node_id = nodes.node_id AND version = nodes.version) temp)) AS tag",
        "FROM",
        "  nodes",
        "  JOIN changesets",
        "    ON nodes.changeset_id = changesets.id",
        "     JOIN users",
        "       ON changesets.user_id = users.id"
      ],
      "ways": [
        "SELECT",
        "  ways.way_id as id,",
        "  ways.visible as visible,",
        "  ways.version as version,",
        "  ways.changeset_id as changeset,",
        "  ways.timestamp AT TIME ZONE 'UTC' as timestamp,",
        "  users.display_name as user,",
        "  changesets.user_id as uid,",
        "  to_json(ARRAY(SELECT HSTORE(temp) FROM (SELECT node_id AS ref FROM way_nodes WHERE way_id = ways.way_id AND version = ways.version ORDER BY sequence_id) temp)) AS nd,",
        "  to_json(ARRAY(SELECT HSTORE(temp) FROM (SELECT k, v FROM way_tags WHERE way_id = ways.way_id AND version = ways.version) temp)) AS tag",
        "FROM",
        "  ways",
        "  JOIN changesets",
        "    ON ways.changeset_id = changesets.id",
        "    JOIN users",
        "      ON changesets.user_id = users.id"
      ],
      "relations": [
        "SELECT",
        "  relations.relation_id as id,",
        "  relations.visible as visible,",
        "  relations.version as version,",
        "  relations.changeset_id as changeset,",
        "  relations.timestamp AT TIME ZONE 'UTC' as timestamp,",
        "  users.display_name as user,",
        "  changesets.user_id as uid,",
        "  to_json(array(SELECT HSTORE(temp) FROM (",
        "    SELECT lower(member_type::text) as type, member_id as ref, member_role as role",
        "    FROM relation_members ",
        "    WHERE {{&type&}}_id = {{&type&}}s.{{&type&}}_id",
        "  )  temp)) as member,",
        "  to_json(array(SELECT HSTORE(temp) FROM (",
        "    SELECT k, v FROM {{&type&}}_tags WHERE {{&type&}}_id = {{&type&}}s.{{&type&}}_id",
        "  ) temp)) as tag",
        "FROM",
        "  relations",
        "  JOIN changesets",
        "    ON relations.changeset_id = changesets.id",
        "    JOIN users",
        "      ON changesets.user_id = users.id"
      ],
      "bounds": [
        "SELECT",
        "  min(nodes.latitude)/10000000::float as minlat,",
        "  min(nodes.longitude)/10000000::float as minlon,",
        "  max(nodes.latitude)/10000000::float as maxlat,",
        "  max(nodes.longitude)/10000000::float as maxlon",
        "FROM",
        "  nodes"
      ],
      "changesets": [
        "SELECT",
        "  changesets.id as id,",
        "  users.display_name as user,",
        "  changesets.user_id as uid,",
        "  changesets.created_at AT TIME ZONE 'UTC' as created_at,",
        "  changesets.closed_at AT TIME ZONE 'UTC' as closed_at,",
        "  (select (closed_at>now() AND num_changes<=50000) AS open from changesets open where open.id = changesets.id) as open,",
        "  changesets.min_lat/10000000::float as min_lat,",
        "  changesets.min_lon/10000000::float as min_lon,",
        "  changesets.max_lat/10000000::float as max_lat,",
        "  changesets.max_lon/10000000::float as max_lon,",
        "  to_json(array(select hstore(temp) from (select k, v from changeset_tags where changeset_id = changesets.id) temp)) as tag",
        "FROM",
        "  changesets",
        "  JOIN users",
        "    ON changesets.user_id = users.id"
      ]
    },
    "current": {
      "ways": [
        "SELECT",
        "  current_ways.id AS id,",
        "  current_ways.visible AS visible,",
        "  current_ways.version AS VERSION,",
        "  current_ways.changeset_id AS changeset,",
        "  current_ways.timestamp AT TIME ZONE 'UTC' AS TIMESTAMP,",
        "  users.display_name AS USER,",
        "  changesets.user_id AS uid,",
        "  to_json(ARRAY(",
        "    SELECT HSTORE(temp)",
        "    FROM (",
        "      SELECT node_id AS ref",
        "      FROM current_way_nodes",
        "      WHERE current_way_nodes.way_id = current_ways.id",
        "        AND version = current_ways.version",
        "      ORDER BY sequence_id",
        "    ) temp)",
        "  ) AS nd,",
        "  to_json(ARRAY(",
        "    SELECT HSTORE(temp)",
        "    FROM (",
        "      SELECT k, v",
        "      FROM current_way_tags",
        "      WHERE current_way_tags.way_id = current_ways.id",
        "    ) TEMP",
        "  )) AS tag",
        "FROM",
        "  current_ways",
        "  JOIN changesets",
        "    ON current_ways.changeset_id = changesets.id",
        "  JOIN users",
        "    ON changesets.user_id = users.id"
      ],
      "nodes": [
        "SELECT",
        "  current_nodes.id as id,",
        "  current_nodes.visible,",
        "  current_nodes.version,",
        "  current_nodes.changeset_id as changeset,",
        "  current_nodes.timestamp AT TIME ZONE 'UTC' as timestamp,",
        "  users.display_name as user,",
        "  changesets.user_id as uid,",
        "  current_nodes.latitude/10000000::float as lat,",
        "  current_nodes.longitude/10000000::float as lon,",
        "  to_json(ARRAY(SELECT HSTORE(temp) FROM (",
        "    SELECT k, v FROM node_tags WHERE node_id = current_nodes.id) temp)",
        "  ) AS tag",
        "FROM",
        "  current_nodes",
        "  JOIN changesets",
        "    ON current_nodes.changeset_id = changesets.id",
        "     JOIN users",
        "       ON changesets.user_id = users.id"
      ],
      "relations": [
        "SELECT",
        "  current_relations.id as id,",
        "  current_relations.visible as visible,",
        "  current_relations.version as version,",
        "  current_relations.changeset_id as changeset,",
        "  current_relations.timestamp AT TIME ZONE 'UTC' as timestamp,",
        "  users.display_name as user,",
        "  changesets.user_id as uid,",
        "  to_json(array(SELECT HSTORE(temp) FROM (",
        "    SELECT lower(member_type::text) as type, member_id as ref, member_role as role",
        "    FROM relation_members ",
        "    WHERE relation_id = current_relations.id",
        "  )  temp)) as member,",
        "  to_json(array(SELECT HSTORE(temp) FROM (",
        "    SELECT k, v FROM {{&type&}}_tags WHERE {{&type&}}_id = current_{{&type&}}s.id",
        "  ) temp)) as tag",
        "FROM",
        "  current_relations",
        "  JOIN changesets",
        "    ON current_relations.changeset_id = changesets.id",
        "    JOIN users",
        "      ON changesets.user_id = users.id"
      ],
      "bounds": [
        "SELECT",
        "  min(current_nodes.latitude)/10000000::float as minlat,",
        "  min(current_nodes.longitude)/10000000::float as minlon,",
        "  max(current_nodes.latitude)/10000000::float as maxlat,",
        "  max(current_nodes.longitude)/10000000::float as maxlon",
        "FROM",
        "  current_nodes"
      ],
      "waysInBbox": [
        "SELECT DISTINCT",
        "  current_way_nodes.way_id AS way_id",
        "FROM",
        "  current_nodes",
        "JOIN",
        "  current_way_nodes ON current_nodes.id = current_way_nodes.node_id",
        "WHERE",
        "  latitude > {{minLat}}*10000000",
        "  AND longitude > {{minLon}}*10000000",
        "  AND latitude < {{maxLat}}*10000000",
        "  AND longitude < {{maxLon}}*10000000"
      ],
      "nodesInWay": [
        "SELECT DISTINCT",
        "  current_way_nodes.node_id AS node_id",
        "FROM",
        "  current_way_nodes"
      ],
      "relationsInBbox": [
        "SELECT DISTINCT",
        "  current_relation_members.relation_id",
        "FROM",
        "  current_relation_members"
      ],
      "waysWithNode": [
        "SELECT DISTINCT",
        "  current_way_nodes.way_id as way_id",
        "FROM",
        "  current_way_nodes",
        "WHERE",
        "  current_way_nodes.node_id = '{{id}}'"
      ],
      "relationsWithNode": [
        "SELECT DISTINCT",
        "  current_relation_members.relation_id AS relation_id",
        "FROM",
        "  current_relation_members",
        "WHERE",
        "  lower(current_relation_members.member_type::text) = 'node'",
        "  AND current_relation_members.member_id = '{{id}}'"
      ],
      "relationsWithWay": [
        "SELECT DISTINCT",
        "  current_relation_members.relation_id AS relation_id",
        "FROM",
        "  current_relation_members",
        "WHERE",
        "  lower(current_relation_members.member_type::text) = 'way'",
        "  AND current_relation_members.member_id = '{{id}}'"
      ],
      "relationsWithRelation": [
        "SELECT DISTINCT",
        "  current_relation_members.relation_id AS relation_id",
        "FROM",
        "  current_relation_members",
        "WHERE",
        "  lower(current_relation_members.member_type::text) = 'relation'",
        "  AND current_relation_members.member_id = '{{id}}'"
      ],
      "waysInRelation": [
        "SELECT DISTINCT",
        "  current_relation_members.member_id AS way_id",
        "FROM",
        "  current_relation_members",
        "WHERE",
        "  lower(member_type::text) = 'way'",
        "  AND relation_id = '{{id}}'"
      ],
      "nodesInRelation": [
        "SELECT DISTINCT",
        "  current_relation_members.member_id AS node_id",
        "FROM",
        "  current_relation_members",
        "WHERE",
        "  lower(member_type::text) = 'node'",
        "  AND relation_id = '{{id}}'"
      ]
    }
  },
  "where": {
    "where": "WHERE",
    "all": {
      "id": "{{&type&}}s.{{&type&}}_id = '{{id}}'",
      "version": "{{&type&}}s.version = '{{version}}'"
    },
    "current": {
      "id": "current_{{&type&}}s.id = '{{id}}'"
    },
    "changeset": {
      "id":  "{{&type&}}s.id = '{{id}}'"
    }
  }
}
